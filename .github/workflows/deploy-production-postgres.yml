name: Deploy n8n Production with PostgreSQL

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging
      deployment_method:
        description: 'Deployment method'
        required: false
        default: 'ssh'
        type: choice
        options:
          - ssh
          - self-hosted
  push:
    branches:
      - main
      - master
    paths:
      - 'docker-compose-postgres.yml'
      - 'deploy-n8n-postgres.sh'
      - '.github/workflows/deploy-production-postgres.yml'

jobs:
  deploy-production-ssh:
    name: Deploy n8n with PostgreSQL (SSH)
    if: ${{ github.event.inputs.deployment_method != 'self-hosted' }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'production' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH with timeout
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H -t rsa ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts 2>/dev/null

          # Configure SSH with strict timeout and options
          cat > ~/.ssh/config <<EOF
          Host production-server
            HostName ${{ secrets.PRODUCTION_HOST }}
            User ${{ secrets.SSH_USER }}
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking yes
            ConnectTimeout 10
            ServerAliveInterval 5
            ServerAliveCountMax 3
            ControlMaster auto
            ControlPath ~/.ssh/control-%r@%h:%p
            ControlPersist 10m
          EOF

      - name: Deploy to server
        run: |
          # Create deployment directory
          ssh production-server "mkdir -p /opt/n8n"

          # Copy deployment files
          scp docker-compose-postgres.yml deploy-n8n-postgres.sh production-server:/opt/n8n/

          # Execute deployment
          ssh production-server "cd /opt/n8n && chmod +x deploy-n8n-postgres.sh && ./deploy-n8n-postgres.sh"

          # Health check
          ssh production-server "cd /opt/n8n && sleep 30 && curl -f http://localhost:5678/healthz"

      - name: Cleanup SSH
        if: always()
        run: |
          rm -rf ~/.ssh/id_rsa
          rm -rf ~/.ssh/config
          rm -rf ~/.ssh/control-*

  deploy-production-self-hosted:
    name: Deploy n8n with PostgreSQL (Self-Hosted)
    if: ${{ github.event.inputs.deployment_method == 'self-hosted' }}
    runs-on: [self-hosted, linux, production]
    environment: ${{ inputs.environment || 'production' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create deployment directory
        run: |
          # El runner ya est√° en el servidor, no necesita SSH
          mkdir -p /opt/n8n

      - name: Copy deployment files
        run: |
          # Copiar archivos localmente (el runner est√° en el servidor)
          cp docker-compose-postgres.yml /opt/n8n/
          cp deploy-n8n-postgres.sh /opt/n8n/
          chmod +x /opt/n8n/deploy-n8n-postgres.sh

      - name: Setup environment variables
        run: |
          cd /opt/n8n

          # Generate secure passwords if not exists
          if [ ! -f .env ]; then
            echo "POSTGRES_PASSWORD=$(openssl rand -hex 16)" > .env
            echo "N8N_BASIC_AUTH_PASSWORD=$(openssl rand -hex 12)" >> .env
            echo "N8N_ENCRYPTION_KEY=$(openssl rand -base64 48)" >> .env
            echo "N8N_HOST=$(hostname -f)" >> .env
            echo "TZ=America/Mexico_City" >> .env
            echo "üîê Generated new credentials in .env file"
          else
            echo "‚úÖ Using existing .env file"
          fi

          # Load and display non-sensitive config
          source .env
          echo "üìç Host configured: $N8N_HOST"

      - name: Stop existing containers
        run: |
          cd /opt/n8n

          # Detectar si es podman o docker
          if command -v podman-compose &> /dev/null; then
            COMPOSE="podman-compose"
          else
            COMPOSE="docker-compose"
          fi

          # Stop existing services if running
          if [ -f docker-compose-postgres.yml ]; then
            $COMPOSE -f docker-compose-postgres.yml down 2>/dev/null || true
          fi

      - name: Deploy with Docker Compose
        run: |
          cd /opt/n8n

          # Deploy using the existing script
          ./deploy-n8n-postgres.sh

      - name: Health check
        run: |
          cd /opt/n8n

          # Detectar runtime
          if command -v podman &> /dev/null; then
            RUNTIME="podman"
          else
            RUNTIME="docker"
          fi

          # Wait for services to start
          echo "‚è≥ Waiting for services to start..."
          sleep 30

          # Check PostgreSQL
          echo "üîç Checking PostgreSQL..."
          $RUNTIME exec n8n-postgres pg_isready -U n8n || exit 1

          # Check n8n
          echo "üîç Checking n8n..."
          curl -f http://localhost:5678/healthz || exit 1

          # Show running containers
          echo "üì¶ Running containers:"
          $RUNTIME ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -E "n8n|postgres"

      - name: Display access information
        run: |
          echo "==============================================="
          echo "‚úÖ Deployment completed successfully!"
          echo "==============================================="
          echo "üåê Access n8n at: http://$(hostname -f):5678"
          echo "üìù Credentials are stored in: /opt/n8n/.env"
          echo ""
          echo "üìä To view credentials (on the server):"
          echo "   cat /opt/n8n/.env | grep -E 'BASIC_AUTH|PASSWORD'"
          echo ""
          echo "üìã Useful commands:"
          echo "   podman-compose -f /opt/n8n/docker-compose-postgres.yml logs -f"
          echo "   podman-compose -f /opt/n8n/docker-compose-postgres.yml ps"
          echo "==============================================="