name: Deploy n8n Production with PostgreSQL

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging
  push:
    branches:
      - main
      - master
    paths:
      - 'docker-compose-postgres.yml'
      - 'deploy-n8n-postgres.sh'
      - '.github/workflows/deploy-production-postgres.yml'

jobs:
  deploy-production:
    name: Deploy n8n with PostgreSQL
    # Usa el runner que ya tienes instalado llamado 'n8n'
    runs-on: self-hosted
    environment: ${{ inputs.environment || 'production' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create deployment directory
        run: |
          # Crear directorio con permisos para usuario n8n
          sudo mkdir -p /opt/n8n
          sudo chown n8n:n8n /opt/n8n

      - name: Copy deployment files
        run: |
          # Copiar archivos y asignar al usuario n8n
          sudo cp docker-compose-postgres.yml /opt/n8n/
          sudo cp deploy-n8n-postgres.sh /opt/n8n/
          sudo chown n8n:n8n /opt/n8n/*
          sudo chmod +x /opt/n8n/deploy-n8n-postgres.sh

      - name: Setup environment variables
        run: |
          # Ejecutar como usuario n8n
          sudo -u n8n bash -c '
            cd /opt/n8n

            # Generate secure passwords if not exists
            if [ ! -f .env ]; then
              echo "POSTGRES_PASSWORD=$(openssl rand -hex 16)" > .env
              echo "N8N_BASIC_AUTH_PASSWORD=$(openssl rand -hex 12)" >> .env
              echo "N8N_ENCRYPTION_KEY=$(openssl rand -base64 48)" >> .env
              echo "N8N_HOST=$(hostname -f)" >> .env
              echo "TZ=America/Mexico_City" >> .env
              echo "üîê Generated new credentials in .env file"
            else
              echo "‚úÖ Using existing .env file"
            fi

            # Load and display non-sensitive config
            source .env
            echo "üìç Host configured: $N8N_HOST"
          '

      - name: Stop existing containers
        run: |
          # Ejecutar como usuario n8n - SOLO PODMAN
          sudo -u n8n bash -c '
            cd /opt/n8n

            # Detener y eliminar contenedores existentes si hay
            podman stop n8n n8n-postgres 2>/dev/null || true
            podman rm n8n n8n-postgres 2>/dev/null || true

            # Si existe podman-compose, usarlo para limpiar
            if command -v podman-compose &> /dev/null && [ -f docker-compose-postgres.yml ]; then
              podman-compose -f docker-compose-postgres.yml down 2>/dev/null || true
            fi
          '

      - name: Deploy with Podman
        run: |
          # Ejecutar deployment como usuario n8n con podman directo
          sudo -u n8n bash -c '
            cd /opt/n8n

            # Cargar variables de entorno
            if [ -f .env ]; then
              source .env
            fi

            echo "üìã Verificando podman-compose..."
            if ! command -v podman-compose &> /dev/null; then
              echo "‚ö†Ô∏è podman-compose no encontrado, usando podman directo"

              # Crear red si no existe
              podman network create n8n-network 2>/dev/null || true

              # Iniciar PostgreSQL
              echo "üóÑÔ∏è Iniciando PostgreSQL..."
              podman run -d \
                --name n8n-postgres \
                --network n8n-network \
                -e POSTGRES_USER=n8n \
                -e POSTGRES_PASSWORD="${POSTGRES_PASSWORD:-n8n_password}" \
                -e POSTGRES_DB=n8n \
                -p 5432:5432 \
                -v postgres_data:/var/lib/postgresql/data \
                --restart always \
                postgres:15-alpine

              # Esperar a que PostgreSQL est√© listo
              sleep 15

              # Iniciar n8n
              echo "üöÄ Iniciando n8n..."
              podman run -d \
                --name n8n \
                --network n8n-network \
                -e DB_TYPE=postgresdb \
                -e DB_POSTGRESDB_HOST=n8n-postgres \
                -e DB_POSTGRESDB_PORT=5432 \
                -e DB_POSTGRESDB_DATABASE=n8n \
                -e DB_POSTGRESDB_USER=n8n \
                -e DB_POSTGRESDB_PASSWORD="${POSTGRES_PASSWORD:-n8n_password}" \
                -e N8N_BASIC_AUTH_ACTIVE=true \
                -e N8N_BASIC_AUTH_USER=admin \
                -e N8N_BASIC_AUTH_PASSWORD="${N8N_BASIC_AUTH_PASSWORD:-changeme}" \
                -p 5678:5678 \
                -v n8n_data:/home/node/.n8n \
                --restart always \
                ghcr.io/jeanlopezxyz/n8n:latest
            else
              echo "‚úÖ Usando podman-compose"
              podman-compose -f docker-compose-postgres.yml up -d
            fi

            # Mostrar contenedores creados
            echo "üì¶ Contenedores creados:"
            podman ps -a
          '

      - name: Health check
        run: |
          # Ejecutar health check como usuario n8n
          sudo -u n8n bash -c '
            cd /opt/n8n

            # Detectar runtime y compose
            if command -v podman &> /dev/null; then
              RUNTIME="podman"
              if command -v podman-compose &> /dev/null; then
                COMPOSE="podman-compose"
              else
                echo "‚ö†Ô∏è podman-compose not found, checking containers directly"
              fi
            else
              RUNTIME="docker"
              COMPOSE="docker-compose"
            fi

            # Wait for services to start
            echo "‚è≥ Waiting for services to start..."
            sleep 30

            # Show all containers first
            echo "üì¶ All containers:"
            $RUNTIME ps -a

            # Try different ways to check PostgreSQL
            echo "üîç Checking PostgreSQL..."

            # Option 1: Try with compose
            if [ ! -z "$COMPOSE" ] && [ -f docker-compose-postgres.yml ]; then
              $COMPOSE -f docker-compose-postgres.yml ps
            fi

            # Option 2: Check by container name patterns
            POSTGRES_CONTAINER=$($RUNTIME ps -a --format "{{.Names}}" | grep -E "postgres|postgresql" | head -1)
            if [ ! -z "$POSTGRES_CONTAINER" ]; then
              echo "Found PostgreSQL container: $POSTGRES_CONTAINER"
              $RUNTIME exec $POSTGRES_CONTAINER pg_isready -U n8n || true
            else
              echo "‚ö†Ô∏è PostgreSQL container not found by name"
            fi

            # Check n8n
            echo "üîç Checking n8n..."
            if curl -f http://localhost:5678/healthz; then
              echo "‚úÖ n8n is responding"
            else
              echo "‚ö†Ô∏è n8n health check failed, checking if container is running"
              N8N_CONTAINER=$($RUNTIME ps -a --format "{{.Names}}" | grep -E "n8n" | grep -v postgres | head -1)
              if [ ! -z "$N8N_CONTAINER" ]; then
                echo "Found n8n container: $N8N_CONTAINER"
                $RUNTIME logs $N8N_CONTAINER --tail=20
              fi
            fi

            # Final status
            echo ""
            echo "üì¶ Final container status:"
            $RUNTIME ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          '

      - name: Display access information
        run: |
          echo "==============================================="
          echo "‚úÖ Deployment completed successfully!"
          echo "==============================================="
          echo "üåê Access n8n at: http://$(hostname -f):5678"
          echo "üìù Credentials are stored in: /opt/n8n/.env"
          echo ""
          echo "üìä To view credentials (on the server):"
          echo "   cat /opt/n8n/.env | grep -E 'BASIC_AUTH|PASSWORD'"
          echo ""
          echo "üìã Useful commands:"
          echo "   podman-compose -f /opt/n8n/docker-compose-postgres.yml logs -f"
          echo "   podman-compose -f /opt/n8n/docker-compose-postgres.yml ps"
          echo "==============================================="