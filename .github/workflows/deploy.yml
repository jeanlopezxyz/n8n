name: Deploy n8n with PostgreSQL and Redis

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'docker/**'
      - 'packages/**'
      - 'Dockerfile'
      - '.github/workflows/deploy.yml'

  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DEPLOYMENT_PATH: /opt/n8n
  APP_USER: n8n
  APP_PORT: 5678
  # Resource limits for medium load (100-500 workflows/hour)
  # Note: CPU limits don't work with Podman rootless (cgroups v2)
  # Memory limits still provide protection against runaway processes
  POSTGRES_MEMORY: 1536m  # 1.5GB for PostgreSQL
  REDIS_MEMORY: 512m      # 512MB for Redis
  N8N_MEMORY: 2560m       # 2.5GB for n8n
  # Total: 4.5GB RAM

jobs:
  # ============================================
  # PREPARE
  # ============================================
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.image }}
      version: ${{ steps.image.outputs.version }}

    steps:
      - name: Determine image to use
        id: image
        run: |
          # Use official n8n image from Docker Hub
          VERSION="latest"
          IMAGE="docker.io/n8nio/n8n:${VERSION}"

          echo "Using official n8n image: ${IMAGE}"
          echo "image=${IMAGE}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

  # ============================================
  # DEPLOY TO PRODUCTION
  # ============================================
  deploy:
    name: Deploy n8n Stack
    needs: [prepare]
    runs-on: [self-hosted]
    environment: ${{ inputs.environment || 'production' }}

    steps:
      - name: Deploy Stack
        run: |
          echo "Starting n8n deployment with Redis..."

          # Configuration
          IMAGE="${{ needs.prepare.outputs.image }}"
          CONTAINER_RUNTIME="podman"

          # Check if running as correct user
          if [[ "$(whoami)" != "${{ env.APP_USER }}" ]]; then
            echo "Switching to user ${{ env.APP_USER }}..."
            SUDO_PREFIX="sudo -u ${{ env.APP_USER }}"
          else
            SUDO_PREFIX=""
          fi

          # Stop and remove existing containers in one command
          echo "Stopping existing containers..."
          $SUDO_PREFIX $CONTAINER_RUNTIME stop n8n n8n-postgres n8n-redis 2>/dev/null || true; $SUDO_PREFIX $CONTAINER_RUNTIME rm -f n8n n8n-postgres n8n-redis 2>/dev/null || true

          # Create network
          echo "Creating network..."
          $SUDO_PREFIX $CONTAINER_RUNTIME network create n8n-network 2>/dev/null || true

          # Create volumes
          echo "Creating volumes..."
          $SUDO_PREFIX $CONTAINER_RUNTIME volume create n8n-postgres-data 2>/dev/null || true
          $SUDO_PREFIX $CONTAINER_RUNTIME volume create n8n-data 2>/dev/null || true
          $SUDO_PREFIX $CONTAINER_RUNTIME volume create n8n-redis-data 2>/dev/null || true

          # Deploy PostgreSQL with memory limits (CPU limits don't work in rootless)
          echo "Starting PostgreSQL (1.5GB RAM limit)..."
          $SUDO_PREFIX $CONTAINER_RUNTIME run -d \
            --name n8n-postgres \
            --network n8n-network \
            --restart unless-stopped \
            --memory="${{ env.POSTGRES_MEMORY }}" \
            --memory-swap="${{ env.POSTGRES_MEMORY }}" \
            -e POSTGRES_USER=n8n \
            -e POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD || 'n8n' }}" \
            -e POSTGRES_DB=n8n \
            -v n8n-postgres-data:/var/lib/postgresql/data \
            docker.io/postgres:15-alpine \
            postgres \
            -c shared_buffers=384MB \
            -c effective_cache_size=1152MB \
            -c maintenance_work_mem=96MB \
            -c work_mem=4MB \
            -c max_connections=100

          # Deploy Redis with memory limits
          echo "Starting Redis (512MB RAM limit)..."
          $SUDO_PREFIX $CONTAINER_RUNTIME run -d \
            --name n8n-redis \
            --network n8n-network \
            --restart unless-stopped \
            --memory="${{ env.REDIS_MEMORY }}" \
            --memory-swap="${{ env.REDIS_MEMORY }}" \
            -v n8n-redis-data:/data \
            docker.io/redis:7-alpine \
            redis-server \
            --appendonly yes \
            --maxmemory 384mb \
            --maxmemory-policy allkeys-lru \
            --save 60 1000 \
            --save 300 100 \
            --save 900 10

          # Pull n8n image while services are starting
          echo "Pulling official n8n image..."
          $SUDO_PREFIX $CONTAINER_RUNTIME pull $IMAGE &
          PULL_PID=$!

          # Wait for services to initialize
          echo "Waiting for services to start..."
          sleep 10

          # Ensure image pull is complete
          wait $PULL_PID

          # Deploy n8n with memory limits
          echo "Starting n8n (2.5GB RAM limit)..."
          $SUDO_PREFIX $CONTAINER_RUNTIME run -d \
            --name n8n \
            --network n8n-network \
            --restart unless-stopped \
            --memory="${{ env.N8N_MEMORY }}" \
            --memory-swap="${{ env.N8N_MEMORY }}" \
            -p ${{ env.APP_PORT }}:5678 \
            -e DB_TYPE=postgresdb \
            -e DB_POSTGRESDB_HOST=n8n-postgres \
            -e DB_POSTGRESDB_PORT=5432 \
            -e DB_POSTGRESDB_DATABASE=n8n \
            -e DB_POSTGRESDB_USER=n8n \
            -e DB_POSTGRESDB_PASSWORD="${{ secrets.POSTGRES_PASSWORD || 'n8n' }}" \
            -e N8N_ENCRYPTION_KEY="${{ secrets.N8N_ENCRYPTION_KEY || 'n8n' }}" \
            -e N8N_HOST="${{ secrets.N8N_HOST || 'localhost' }}" \
            -e N8N_PORT=5678 \
            -e N8N_PROTOCOL="${{ secrets.N8N_PROTOCOL || 'https' }}" \
            -e WEBHOOK_URL="${{ secrets.WEBHOOK_URL || 'https://localhost' }}" \
            -e EXECUTIONS_MODE="queue" \
            -e QUEUE_BULL_REDIS_HOST="n8n-redis" \
            -e QUEUE_BULL_REDIS_PORT="6379" \
            -e N8N_RUNNERS_ENABLED="true" \
            -e N8N_BLOCK_ENV_ACCESS_IN_NODE="true" \
            -e N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS="true" \
            -e N8N_SECURE_COOKIE="${{ secrets.N8N_PROTOCOL == 'https' || 'true' }}" \
            -e GENERIC_TIMEZONE="America/Santiago" \
            -v n8n-data:/home/node/.n8n \
            $IMAGE

          echo "Deployment completed!"

  # ============================================
  # HEALTH CHECK
  # ============================================
  health-check:
    name: Health Verification
    needs: deploy
    runs-on: [self-hosted]

    steps:
      - name: Check Services Health
        run: |
          echo "Checking services..."

          # Check if running as correct user
          if [[ "$(whoami)" != "${{ env.APP_USER }}" ]]; then
            SUDO_PREFIX="sudo -u ${{ env.APP_USER }}"
          else
            SUDO_PREFIX=""
          fi

          # Check PostgreSQL
          echo "Checking PostgreSQL..."
          for i in {1..10}; do
            if $SUDO_PREFIX podman exec n8n-postgres pg_isready -U n8n 2>/dev/null; then
              echo "PostgreSQL is ready"
              break
            elif [ $i -eq 10 ]; then
              echo "PostgreSQL failed to start after 10 attempts"
              exit 1
            else
              echo "Attempt $i/10 - PostgreSQL not ready..."
              sleep 3
            fi
          done

          # Check Redis
          echo "Checking Redis..."
          for i in {1..10}; do
            if $SUDO_PREFIX podman exec n8n-redis redis-cli ping 2>/dev/null | grep -q PONG; then
              echo "Redis is ready"
              break
            elif [ $i -eq 10 ]; then
              echo "Redis failed to start after 10 attempts"
              exit 1
            else
              echo "Attempt $i/10 - Redis not ready..."
              sleep 3
            fi
          done

          # Check n8n
          echo "Checking n8n..."
          URL="http://localhost:${{ env.APP_PORT }}"

          for i in {1..15}; do
            if curl -f -s -o /dev/null -w "%{http_code}" "$URL/healthz" | grep -q "200\|204"; then
              echo "n8n is healthy"
              echo "All services running!"
              echo "Access n8n at: $URL"
              echo "Note: Configure reverse proxy in pfSense for HTTPS access"
              exit 0
            else
              echo "Attempt $i/15 - Waiting for n8n..."
              sleep 10
            fi
          done

          echo "Health check failed"
          exit 1

      - name: Show Stack Status
        if: always()
        run: |
          if [[ "$(whoami)" != "${{ env.APP_USER }}" ]]; then
            SUDO_PREFIX="sudo -u ${{ env.APP_USER }}"
          else
            SUDO_PREFIX=""
          fi

          echo "Running containers:"
          $SUDO_PREFIX podman ps

          echo ""
          echo "Memory usage (if supported):"
          $SUDO_PREFIX podman stats --no-stream 2>/dev/null || echo "Stats not available in rootless mode"

          echo ""
          echo "Volume usage:"
          for vol in n8n-data n8n-postgres-data n8n-redis-data; do
            if $SUDO_PREFIX podman volume exists $vol 2>/dev/null; then
              echo "Volume: $vol"
              MOUNT_POINT=$($SUDO_PREFIX podman volume inspect $vol --format '{{.Mountpoint}}')
              du -sh $MOUNT_POINT 2>/dev/null || echo "  Size: Unable to determine"
            fi
          done

          echo ""
          echo "System disk usage:"
          df -h / | grep -E '(Filesystem|^/)'

  # ============================================
  # SUMMARY
  # ============================================
  summary:
    name: Deployment Summary
    needs: [prepare, deploy, health-check]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Generate summary
        run: |
          echo "# n8n Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Stack Components" >> $GITHUB_STEP_SUMMARY
          echo "- PostgreSQL 15 (Database) - 1.5GB RAM limit" >> $GITHUB_STEP_SUMMARY
          echo "- Redis 7 (Queue & Cache) - 512MB RAM limit" >> $GITHUB_STEP_SUMMARY
          echo "- n8n (Workflow Automation) - 2.5GB RAM limit" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Image" >> $GITHUB_STEP_SUMMARY
          echo "Using official n8n image" >> $GITHUB_STEP_SUMMARY
          echo "- Image: ${{ needs.prepare.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ needs.prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Deployment Status" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "**Status:** Successfully deployed" >> $GITHUB_STEP_SUMMARY
            echo "- Environment: ${{ inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
            echo "- Port: ${{ env.APP_PORT }}" >> $GITHUB_STEP_SUMMARY
            echo "- Execution Mode: Queue (with Redis)" >> $GITHUB_STEP_SUMMARY
            echo "- Memory Protection: Enabled" >> $GITHUB_STEP_SUMMARY
            echo "- SSL/TLS: Configure via pfSense reverse proxy" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status:** Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Health Check Results" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.health-check.result }}" == "success" ]]; then
            echo "All services are healthy:" >> $GITHUB_STEP_SUMMARY
            echo "- PostgreSQL: Running" >> $GITHUB_STEP_SUMMARY
            echo "- Redis: Running" >> $GITHUB_STEP_SUMMARY
            echo "- n8n: Running" >> $GITHUB_STEP_SUMMARY
          else
            echo "Health check failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Resource Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- Total RAM allocated: 4.5GB" >> $GITHUB_STEP_SUMMARY
          echo "- CPU limits: Not available (Podman rootless)" >> $GITHUB_STEP_SUMMARY
          echo "- Supports: 100-500 workflows/hour" >> $GITHUB_STEP_SUMMARY