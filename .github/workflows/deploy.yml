name: Deploy n8n with PostgreSQL and Redis

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'docker/**'
      - 'packages/**'
      - 'Dockerfile'
      - '.github/workflows/deploy.yml'

  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DEPLOYMENT_PATH: /opt/n8n
  APP_USER: n8n
  APP_PORT: 5678

jobs:
  # ============================================
  # PREPARE
  # ============================================
  prepare:
    name: 🎯 Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.image }}
      version: ${{ steps.image.outputs.version }}

    steps:
      - name: Determine image to use
        id: image
        run: |
          # Use official n8n image from Docker Hub
          VERSION="latest"
          IMAGE="docker.io/n8nio/n8n:${VERSION}"

          echo "📦 Using official n8n image: ${IMAGE}"
          echo "image=${IMAGE}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

  # ============================================
  # DEPLOY TO PRODUCTION
  # ============================================
  deploy:
    name: 🚀 Deploy n8n Stack
    needs: [prepare]
    runs-on: [self-hosted]
    environment: ${{ inputs.environment || 'production' }}

    steps:
      - name: Deploy Stack
        run: |
          echo "🚀 Starting n8n deployment with Redis..."

          # Configuration
          IMAGE="${{ needs.prepare.outputs.image }}"
          CONTAINER_RUNTIME="podman"

          # Check if running as correct user
          if [[ "$(whoami)" != "${{ env.APP_USER }}" ]]; then
            echo "⚠️ Switching to user ${{ env.APP_USER }}..."
            SUDO_PREFIX="sudo -u ${{ env.APP_USER }}"
          else
            SUDO_PREFIX=""
          fi

          # Stop existing containers
          echo "🛑 Stopping existing containers..."
          $SUDO_PREFIX $CONTAINER_RUNTIME stop n8n n8n-postgres n8n-redis 2>/dev/null || true
          $SUDO_PREFIX $CONTAINER_RUNTIME rm -f n8n n8n-postgres n8n-redis 2>/dev/null || true

          # Create network
          echo "🌐 Creating network..."
          $SUDO_PREFIX $CONTAINER_RUNTIME network create n8n-network 2>/dev/null || true

          # Create volumes
          echo "📁 Creating volumes..."
          $SUDO_PREFIX $CONTAINER_RUNTIME volume create n8n-postgres-data 2>/dev/null || true
          $SUDO_PREFIX $CONTAINER_RUNTIME volume create n8n-data 2>/dev/null || true
          $SUDO_PREFIX $CONTAINER_RUNTIME volume create n8n-redis-data 2>/dev/null || true

          # Deploy PostgreSQL
          echo "🗄️ Starting PostgreSQL..."
          $SUDO_PREFIX $CONTAINER_RUNTIME run -d \
            --name n8n-postgres \
            --network n8n-network \
            --restart unless-stopped \
            -e POSTGRES_USER=n8n \
            -e POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD || 'n8n' }}" \
            -e POSTGRES_DB=n8n \
            -v n8n-postgres-data:/var/lib/postgresql/data \
            docker.io/postgres:15-alpine

          # Deploy Redis
          echo "🔴 Starting Redis..."
          $SUDO_PREFIX $CONTAINER_RUNTIME run -d \
            --name n8n-redis \
            --network n8n-network \
            --restart unless-stopped \
            -v n8n-redis-data:/data \
            docker.io/redis:7-alpine \
            redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

          # Wait for services
          echo "⏳ Waiting for services to start..."
          sleep 20

          # Pull n8n image
          echo "📥 Pulling official n8n image..."
          $SUDO_PREFIX $CONTAINER_RUNTIME pull $IMAGE

          # Deploy n8n with Redis queue mode
          echo "🚀 Starting n8n..."
          $SUDO_PREFIX $CONTAINER_RUNTIME run -d \
            --name n8n \
            --network n8n-network \
            --restart unless-stopped \
            -p ${{ env.APP_PORT }}:5678 \
            -e DB_TYPE=postgresdb \
            -e DB_POSTGRESDB_HOST=n8n-postgres \
            -e DB_POSTGRESDB_PORT=5432 \
            -e DB_POSTGRESDB_DATABASE=n8n \
            -e DB_POSTGRESDB_USER=n8n \
            -e DB_POSTGRESDB_PASSWORD="${{ secrets.POSTGRES_PASSWORD || 'n8n' }}" \
            -e N8N_ENCRYPTION_KEY="${{ secrets.N8N_ENCRYPTION_KEY || 'n8n' }}" \
            -e N8N_HOST="${{ secrets.N8N_HOST || 'localhost' }}" \
            -e N8N_PORT=5678 \
            -e N8N_PROTOCOL="http" \
            -e EXECUTIONS_MODE="queue" \
            -e QUEUE_BULL_REDIS_HOST="n8n-redis" \
            -e QUEUE_BULL_REDIS_PORT="6379" \
            -e N8N_RUNNERS_ENABLED="true" \
            -e N8N_BLOCK_ENV_ACCESS_IN_NODE="true" \
            -e N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS="true" \
            -e GENERIC_TIMEZONE="America/Santiago" \
            -v n8n-data:/home/node/.n8n \
            $IMAGE

          echo "✅ Deployment completed!"

  # ============================================
  # HEALTH CHECK
  # ============================================
  health-check:
    name: ✅ Health Verification
    needs: deploy
    runs-on: [self-hosted]

    steps:
      - name: Check Services Health
        run: |
          echo "🔍 Checking services..."

          # Check if running as correct user
          if [[ "$(whoami)" != "${{ env.APP_USER }}" ]]; then
            SUDO_PREFIX="sudo -u ${{ env.APP_USER }}"
          else
            SUDO_PREFIX=""
          fi

          # Check PostgreSQL
          echo "🗄️ Checking PostgreSQL..."
          for i in {1..10}; do
            if $SUDO_PREFIX podman exec n8n-postgres pg_isready -U n8n 2>/dev/null; then
              echo "✅ PostgreSQL is ready"
              break
            else
              echo "⏳ Attempt $i/10 - PostgreSQL not ready..."
              sleep 5
            fi
          done

          # Check Redis
          echo "🔴 Checking Redis..."
          for i in {1..10}; do
            if $SUDO_PREFIX podman exec n8n-redis redis-cli ping 2>/dev/null | grep -q PONG; then
              echo "✅ Redis is ready"
              break
            else
              echo "⏳ Attempt $i/10 - Redis not ready..."
              sleep 5
            fi
          done

          # Check n8n
          echo "🔍 Checking n8n..."
          URL="http://localhost:${{ env.APP_PORT }}"

          for i in {1..15}; do
            if curl -f -s -o /dev/null -w "%{http_code}" "$URL/healthz" | grep -q "200\|204"; then
              echo "✅ n8n is healthy"
              echo "🎉 All services running!"
              echo "📦 Access n8n at: $URL"
              exit 0
            else
              echo "⏳ Attempt $i/15 - Waiting for n8n..."
              sleep 10
            fi
          done

          echo "❌ Health check failed"
          exit 1

      - name: Show Stack Status
        if: always()
        run: |
          if [[ "$(whoami)" != "${{ env.APP_USER }}" ]]; then
            SUDO_PREFIX="sudo -u ${{ env.APP_USER }}"
          else
            SUDO_PREFIX=""
          fi

          echo "📦 Running containers:"
          $SUDO_PREFIX podman ps

          echo ""
          echo "💾 Volume usage:"
          for vol in n8n-data n8n-postgres-data n8n-redis-data; do
            if $SUDO_PREFIX podman volume exists $vol 2>/dev/null; then
              echo "Volume: $vol"
              MOUNT_POINT=$($SUDO_PREFIX podman volume inspect $vol --format '{{.Mountpoint}}')
              du -sh $MOUNT_POINT 2>/dev/null || echo "  Size: Unable to determine"
            fi
          done

          echo ""
          echo "📊 System disk usage:"
          df -h / | grep -E '(Filesystem|^/)'

  # ============================================
  # SUMMARY
  # ============================================
  summary:
    name: 📊 Deployment Summary
    needs: [prepare, deploy, health-check]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Generate summary
        run: |
          echo "# 📊 n8n Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 🏗️ Stack Components" >> $GITHUB_STEP_SUMMARY
          echo "- PostgreSQL 15 (Database)" >> $GITHUB_STEP_SUMMARY
          echo "- Redis 7 (Queue & Cache)" >> $GITHUB_STEP_SUMMARY
          echo "- n8n (Workflow Automation)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 📦 Image" >> $GITHUB_STEP_SUMMARY
          echo "✅ Using official n8n image" >> $GITHUB_STEP_SUMMARY
          echo "- Image: ${{ needs.prepare.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ needs.prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Deployment" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "✅ Successfully deployed" >> $GITHUB_STEP_SUMMARY
            echo "- Environment: ${{ inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
            echo "- Port: ${{ env.APP_PORT }}" >> $GITHUB_STEP_SUMMARY
            echo "- Execution Mode: Queue (with Redis)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Health Check" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.health-check.result }}" == "success" ]]; then
            echo "✅ All services healthy" >> $GITHUB_STEP_SUMMARY
            echo "- PostgreSQL: Running" >> $GITHUB_STEP_SUMMARY
            echo "- Redis: Running" >> $GITHUB_STEP_SUMMARY
            echo "- n8n: Running" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Health check failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Benefits" >> $GITHUB_STEP_SUMMARY
          echo "- Better performance with Redis queue" >> $GITHUB_STEP_SUMMARY
          echo "- Improved reliability" >> $GITHUB_STEP_SUMMARY
          echo "- Scalability ready" >> $GITHUB_STEP_SUMMARY