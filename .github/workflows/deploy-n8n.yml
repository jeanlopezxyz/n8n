name: Deploy n8n Production Stack

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'docker-compose*.yml'
      - '.github/workflows/deploy-n8n.yml'

  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  N8N_IMAGE: docker.io/n8nio/n8n:latest
  DEPLOYMENT_PATH: /opt/n8n

jobs:
  deploy:
    name: Deploy n8n Production Stack
    runs-on: [self-hosted, Linux, X64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify environment
        run: |
          echo "üöÄ Deploying n8n Production Stack"
          echo "Current user: $(whoami)"
          echo "Deployment path: ${{ env.DEPLOYMENT_PATH }}"
          echo "Environment: ${{ inputs.environment || 'production' }}"
          echo "Image: ${{ env.N8N_IMAGE }}"

      - name: Create deployment directory and network
        run: |
          sudo -u n8n mkdir -p ${{ env.DEPLOYMENT_PATH }}
          sudo -u n8n mkdir -p ${{ env.DEPLOYMENT_PATH }}/postgres_data
          sudo -u n8n mkdir -p ${{ env.DEPLOYMENT_PATH }}/postgres_backups
          sudo -u n8n mkdir -p ${{ env.DEPLOYMENT_PATH }}/redis_data
          sudo -u n8n mkdir -p ${{ env.DEPLOYMENT_PATH }}/n8n_data/main
          sudo -u n8n mkdir -p ${{ env.DEPLOYMENT_PATH }}/n8n_data/worker1
          sudo -u n8n mkdir -p ${{ env.DEPLOYMENT_PATH }}/n8n_data/worker2

          # Create podman network if it doesn't exist
          sudo -u n8n podman network exists n8n-network || sudo -u n8n podman network create n8n-network

      - name: Stop existing containers
        run: |
          echo "üì¶ Stopping existing containers..."
          sudo -u n8n podman stop n8n n8n-worker-1 n8n-worker-2 n8n-redis n8n-postgres n8n-postgres-backup 2>/dev/null || true
          sudo -u n8n podman rm n8n n8n-worker-1 n8n-worker-2 n8n-redis n8n-postgres n8n-postgres-backup 2>/dev/null || true

      - name: Pull latest images
        run: |
          echo "üì• Pulling latest images..."
          sudo -u n8n podman pull ${{ env.N8N_IMAGE }}
          sudo -u n8n podman pull docker.io/library/postgres:15-alpine
          sudo -u n8n podman pull docker.io/library/redis:7-alpine

      - name: Start PostgreSQL
        run: |
          echo "üóÑÔ∏è Starting PostgreSQL..."
          sudo -u n8n podman run -d \
            --name n8n-postgres \
            --network n8n-network \
            -e POSTGRES_USER=n8n \
            -e POSTGRES_PASSWORD="${POSTGRES_PASSWORD:-n8n_secure_password_123}" \
            -e POSTGRES_DB=n8n \
            -v ${{ env.DEPLOYMENT_PATH }}/postgres_data:/var/lib/postgresql/data:Z \
            -v ${{ env.DEPLOYMENT_PATH }}/postgres_backups:/backups:Z \
            -p 5432:5432 \
            --restart always \
            docker.io/library/postgres:15-alpine

          # Wait for PostgreSQL to be ready
          sleep 10
          for i in {1..30}; do
            if sudo -u n8n podman exec n8n-postgres pg_isready -U n8n 2>/dev/null; then
              echo "‚úÖ PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL... ($i/30)"
            sleep 2
          done

      - name: Start Redis
        run: |
          echo "üìÆ Starting Redis..."
          sudo -u n8n podman run -d \
            --name n8n-redis \
            --network n8n-network \
            -v ${{ env.DEPLOYMENT_PATH }}/redis_data:/data:Z \
            -p 6379:6379 \
            --restart always \
            docker.io/library/redis:7-alpine \
            redis-server --appendonly yes

          # Wait for Redis to be ready
          sleep 5
          for i in {1..10}; do
            if sudo -u n8n podman exec n8n-redis redis-cli ping 2>/dev/null; then
              echo "‚úÖ Redis is ready"
              break
            fi
            echo "Waiting for Redis... ($i/10)"
            sleep 2
          done

      - name: Start n8n Worker 1
        run: |
          echo "üîß Starting n8n Worker 1..."
          sudo -u n8n podman run -d \
            --name n8n-worker-1 \
            --network n8n-network \
            -e DB_TYPE=postgresdb \
            -e DB_POSTGRESDB_HOST=n8n-postgres \
            -e DB_POSTGRESDB_PORT=5432 \
            -e DB_POSTGRESDB_DATABASE=n8n \
            -e DB_POSTGRESDB_USER=n8n \
            -e DB_POSTGRESDB_PASSWORD="${POSTGRES_PASSWORD:-n8n_secure_password_123}" \
            -e EXECUTIONS_MODE=queue \
            -e QUEUE_BULL_REDIS_HOST=n8n-redis \
            -e QUEUE_BULL_REDIS_PORT=6379 \
            -e QUEUE_HEALTH_CHECK_ACTIVE=true \
            -e N8N_CONCURRENCY_PRODUCTION_LIMIT=10 \
            -e N8N_ENCRYPTION_KEY="${N8N_ENCRYPTION_KEY:-your-encryption-key-here}" \
            -e GENERIC_TIMEZONE="America/Mexico_City" \
            -v ${{ env.DEPLOYMENT_PATH }}/n8n_data/worker1:/home/node/.n8n:Z \
            --restart always \
            ${{ env.N8N_IMAGE }} \
            n8n worker

      - name: Start n8n Worker 2
        run: |
          echo "üîß Starting n8n Worker 2..."
          sudo -u n8n podman run -d \
            --name n8n-worker-2 \
            --network n8n-network \
            -e DB_TYPE=postgresdb \
            -e DB_POSTGRESDB_HOST=n8n-postgres \
            -e DB_POSTGRESDB_PORT=5432 \
            -e DB_POSTGRESDB_DATABASE=n8n \
            -e DB_POSTGRESDB_USER=n8n \
            -e DB_POSTGRESDB_PASSWORD="${POSTGRES_PASSWORD:-n8n_secure_password_123}" \
            -e EXECUTIONS_MODE=queue \
            -e QUEUE_BULL_REDIS_HOST=n8n-redis \
            -e QUEUE_BULL_REDIS_PORT=6379 \
            -e QUEUE_HEALTH_CHECK_ACTIVE=true \
            -e N8N_CONCURRENCY_PRODUCTION_LIMIT=10 \
            -e N8N_ENCRYPTION_KEY="${N8N_ENCRYPTION_KEY:-your-encryption-key-here}" \
            -e GENERIC_TIMEZONE="America/Mexico_City" \
            -v ${{ env.DEPLOYMENT_PATH }}/n8n_data/worker2:/home/node/.n8n:Z \
            --restart always \
            ${{ env.N8N_IMAGE }} \
            n8n worker

      - name: Start n8n Main
        run: |
          echo "üöÄ Starting n8n Main..."
          sudo -u n8n podman run -d \
            --name n8n \
            --network n8n-network \
            -e DB_TYPE=postgresdb \
            -e DB_POSTGRESDB_HOST=n8n-postgres \
            -e DB_POSTGRESDB_PORT=5432 \
            -e DB_POSTGRESDB_DATABASE=n8n \
            -e DB_POSTGRESDB_USER=n8n \
            -e DB_POSTGRESDB_PASSWORD="${POSTGRES_PASSWORD:-n8n_secure_password_123}" \
            -e EXECUTIONS_MODE=queue \
            -e QUEUE_BULL_REDIS_HOST=n8n-redis \
            -e QUEUE_BULL_REDIS_PORT=6379 \
            -e N8N_BASIC_AUTH_ACTIVE="${N8N_BASIC_AUTH_ACTIVE:-true}" \
            -e N8N_BASIC_AUTH_USER="${N8N_BASIC_AUTH_USER:-admin}" \
            -e N8N_BASIC_AUTH_PASSWORD="${N8N_BASIC_AUTH_PASSWORD:-changeme}" \
            -e N8N_HOST="n8n.labjp.xyz" \
            -e N8N_PORT=5678 \
            -e N8N_PROTOCOL=https \
            -e WEBHOOK_URL="https://n8n.labjp.xyz" \
            -e EXECUTIONS_DATA_SAVE_ON_ERROR=all \
            -e EXECUTIONS_DATA_SAVE_ON_SUCCESS=all \
            -e EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=true \
            -e EXECUTIONS_DATA_MAX_AGE=336 \
            -e EXECUTIONS_DATA_PRUNE=true \
            -e N8N_SECURE_COOKIE=false \
            -e N8N_BLOCK_ENV_ACCESS_IN_NODE=false \
            -e N8N_ENCRYPTION_KEY="${N8N_ENCRYPTION_KEY:-your-encryption-key-here}" \
            -e GENERIC_TIMEZONE="America/Mexico_City" \
            -e N8N_METRICS=true \
            -e N8N_METRICS_INCLUDE_DEFAULT=true \
            -v ${{ env.DEPLOYMENT_PATH }}/n8n_data/main:/home/node/.n8n:Z \
            -p 5678:5678 \
            --restart always \
            ${{ env.N8N_IMAGE }}

      - name: Start Backup Service
        run: |
          echo "üíæ Starting Backup Service..."
          sudo -u n8n podman run -d \
            --name n8n-postgres-backup \
            --network n8n-network \
            -e PGPASSWORD="${POSTGRES_PASSWORD:-n8n_secure_password_123}" \
            -v ${{ env.DEPLOYMENT_PATH }}/postgres_backups:/backups:Z \
            --restart always \
            docker.io/library/postgres:15-alpine \
            sh -c 'while true; do
              timestamp=$(date +%Y%m%d_%H%M%S);
              pg_dump -h n8n-postgres -U n8n -d n8n > /backups/n8n_backup_$timestamp.sql 2>/dev/null;
              echo "Backup completed: n8n_backup_$timestamp.sql";
              find /backups -name "n8n_backup_*.sql" -mtime +7 -delete 2>/dev/null;
              echo "Old backups cleaned";
              sleep 86400;
            done'

      - name: Health checks
        run: |
          echo "üîç Checking service health..."

          # Check containers are running
          echo "=== Container Status ==="
          sudo -u n8n podman ps

          # Check n8n main instance
          echo "Checking n8n main instance..."
          max_attempts=20
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            if curl -f http://localhost:5678/healthz 2>/dev/null; then
              echo "‚úÖ n8n is healthy and responding!"
              break
            else
              echo "Attempt $attempt/$max_attempts: n8n not ready yet..."
              sleep 10
              attempt=$((attempt + 1))
            fi
          done

          if [ $attempt -gt $max_attempts ]; then
            echo "‚ùå n8n health check failed after $max_attempts attempts"
            sudo -u n8n podman logs n8n
            exit 1
          fi

      - name: Verify workers
        run: |
          echo "üîß Checking worker status..."

          # Check if workers are running
          if sudo -u n8n podman ps | grep -q n8n-worker; then
            echo "‚úÖ Workers are running"
          else
            echo "‚ùå Workers are not running"
            exit 1
          fi

          # Show worker logs
          echo "Worker 1 last logs:"
          sudo -u n8n podman logs --tail=10 n8n-worker-1 2>/dev/null || true

          echo ""
          echo "Worker 2 last logs:"
          sudo -u n8n podman logs --tail=10 n8n-worker-2 2>/dev/null || true

      - name: Show deployment summary
        if: always()
        run: |
          echo "üìä === Deployment Summary ==="
          echo "Environment: ${{ inputs.environment || 'production' }}"
          echo "Stack components:"
          echo "  - PostgreSQL 15 (Database)"
          echo "  - Redis 7 (Queue & Cache)"
          echo "  - n8n Main (Web UI & API)"
          echo "  - n8n Worker 1 (Background jobs)"
          echo "  - n8n Worker 2 (Background jobs)"
          echo "  - Backup Service (Daily backups)"

          echo ""
          echo "=== Container Status ==="
          sudo -u n8n podman ps

          echo ""
          echo "=== Recent n8n logs ==="
          sudo -u n8n podman logs --tail=20 n8n 2>/dev/null || echo "Could not retrieve logs"

      - name: Deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ n8n production stack deployed successfully!"
            echo "üåê Access URL: https://n8n.labjp.xyz"
            echo "üìä Components running:"
            sudo -u n8n podman ps --format "table {{.Names}}\t{{.Status}}" | grep -E "n8n|redis|postgres"
          else
            echo "‚ùå n8n production stack deployment failed"
            echo "Check the logs above for details"
          fi