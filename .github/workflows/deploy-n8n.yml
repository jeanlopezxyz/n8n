name: Deploy n8n Production Stack

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'docker-compose*.yml'
      - 'Dockerfile'
      - '.github/workflows/deploy-n8n.yml'

  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  DEPLOYMENT_PATH: /opt/n8n
  COMPOSE_FILE: docker-compose-production.yml

jobs:
  deploy:
    name: Deploy n8n Production Stack
    runs-on: [self-hosted, n8n]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify environment
        run: |
          echo "üöÄ Deploying n8n Production Stack"
          echo "Current user: $(whoami)"
          echo "Deployment path: ${{ env.DEPLOYMENT_PATH }}"
          echo "Environment: ${{ inputs.environment || 'production' }}"

      - name: Create deployment directory
        run: |
          sudo -u n8n mkdir -p ${{ env.DEPLOYMENT_PATH }}
          sudo -u n8n mkdir -p ${{ env.DEPLOYMENT_PATH }}/scripts
          sudo -u n8n mkdir -p ${{ env.DEPLOYMENT_PATH }}/backups

      - name: Copy deployment files
        run: |
          # Copy docker-compose file
          sudo -u n8n cp -f docker-compose-production.yml ${{ env.DEPLOYMENT_PATH }}/

          # Create .env file if it doesn't exist
          if [ ! -f "${{ env.DEPLOYMENT_PATH }}/.env" ]; then
            sudo -u n8n touch ${{ env.DEPLOYMENT_PATH }}/.env
            echo "Created new .env file"
          fi

          # Ensure proper permissions
          sudo -u n8n chmod 644 ${{ env.DEPLOYMENT_PATH }}/docker-compose-production.yml

      - name: Stop existing stack
        run: |
          cd ${{ env.DEPLOYMENT_PATH }}

          echo "üì¶ Stopping existing containers..."
          sudo -u n8n docker-compose -f ${{ env.COMPOSE_FILE }} down --timeout 30 || true

      - name: Pull latest images
        run: |
          cd ${{ env.DEPLOYMENT_PATH }}

          echo "üì• Pulling latest images..."
          sudo -u n8n docker-compose -f ${{ env.COMPOSE_FILE }} pull

      - name: Start production stack
        run: |
          cd ${{ env.DEPLOYMENT_PATH }}

          echo "üöÄ Starting production stack..."
          sudo -u n8n docker-compose -f ${{ env.COMPOSE_FILE }} up -d

          # Wait for services to initialize
          echo "‚è≥ Waiting for services to start..."
          sleep 45

      - name: Health checks
        run: |
          cd ${{ env.DEPLOYMENT_PATH }}

          echo "üîç Checking service health..."

          # Check container status
          sudo -u n8n docker-compose -f ${{ env.COMPOSE_FILE }} ps

          # Check Redis
          echo "Checking Redis..."
          sudo -u n8n docker exec n8n-redis redis-cli ping || exit 1

          # Check PostgreSQL
          echo "Checking PostgreSQL..."
          sudo -u n8n docker exec n8n-postgres pg_isready -U n8n || exit 1

          # Check n8n main instance
          echo "Checking n8n main instance..."
          max_attempts=15
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            if curl -f http://localhost:5678/healthz; then
              echo "‚úÖ n8n is healthy and responding!"
              break
            else
              echo "Attempt $attempt/$max_attempts: n8n not ready yet..."
              sleep 10
              attempt=$((attempt + 1))
            fi
          done

          if [ $attempt -gt $max_attempts ]; then
            echo "‚ùå n8n health check failed after $max_attempts attempts"
            sudo -u n8n docker-compose -f ${{ env.COMPOSE_FILE }} logs --tail=100 n8n
            exit 1
          fi

      - name: Verify workers
        run: |
          cd ${{ env.DEPLOYMENT_PATH }}

          echo "üîß Checking worker status..."

          # Check if workers are running
          sudo -u n8n docker ps | grep n8n-worker || exit 1

          # Show worker logs
          echo "Worker 1 status:"
          sudo -u n8n docker logs --tail=20 n8n-worker-1

          echo "Worker 2 status:"
          sudo -u n8n docker logs --tail=20 n8n-worker-2

      - name: Show deployment summary
        if: always()
        run: |
          cd ${{ env.DEPLOYMENT_PATH }}

          echo "üìä === Deployment Summary ==="
          echo "Environment: ${{ inputs.environment || 'production' }}"
          echo "Stack components:"
          echo "  - PostgreSQL 15 (Database)"
          echo "  - Redis 7 (Queue & Cache)"
          echo "  - n8n Main (Web UI & API)"
          echo "  - n8n Worker 1 (Background jobs)"
          echo "  - n8n Worker 2 (Background jobs)"
          echo "  - Backup Service (Daily backups)"

          echo ""
          echo "=== Container Status ==="
          sudo -u n8n docker-compose -f ${{ env.COMPOSE_FILE }} ps

          echo ""
          echo "=== Recent n8n logs ==="
          sudo -u n8n docker-compose -f ${{ env.COMPOSE_FILE }} logs --tail=30 n8n

      - name: Deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ n8n production stack deployed successfully!"
            echo "üåê Access URL: https://n8n.labjp.xyz"
            echo "üìä Components running:"
            echo "   - PostgreSQL: ‚úÖ"
            echo "   - Redis: ‚úÖ"
            echo "   - n8n Main: ‚úÖ"
            echo "   - Workers: ‚úÖ"
            echo "   - Backup Service: ‚úÖ"
          else
            echo "‚ùå n8n production stack deployment failed"
            echo "Check the logs above for details"
          fi