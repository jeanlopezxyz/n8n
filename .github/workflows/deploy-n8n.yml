name: Build and Deploy n8n Production Stack

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'docker/**'
      - 'packages/**'
      - '.github/workflows/deploy-n8n.yml'
      - 'docker-compose*.yml'

  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DEPLOYMENT_PATH: /opt/n8n

jobs:
  build-and-push:
    name: Build and Push to GitHub Registry
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build n8n
        run: pnpm build

      - name: Create compiled artifacts
        run: |
          mkdir -p compiled
          cp -r packages compiled/
          cp package.json compiled/
          cp pnpm-lock.yaml compiled/
          cp pnpm-workspace.yaml compiled/

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/images/n8n/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_VERSION=22
            N8N_VERSION=${{ github.sha }}

  deploy:
    name: Deploy n8n Production Stack
    needs: build-and-push
    runs-on: [self-hosted, Linux, X64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify environment
        run: |
          echo "🚀 Deploying n8n Production Stack"
          echo "Current user: $(whoami)"
          echo "Deployment path: ${{ env.DEPLOYMENT_PATH }}"
          echo "Environment: ${{ inputs.environment || 'production' }}"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

      - name: Login to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | sudo -u n8n podman login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Create deployment directory
        run: |
          sudo -u n8n mkdir -p ${{ env.DEPLOYMENT_PATH }}
          sudo -u n8n mkdir -p ${{ env.DEPLOYMENT_PATH }}/.env

      - name: Copy docker-compose files
        run: |
          # Copy docker-compose production file
          sudo -u n8n cp -f docker-compose-production.yml ${{ env.DEPLOYMENT_PATH }}/

          # Update the image in docker-compose to use our custom build
          sudo -u n8n sed -i "s|ghcr.io/jeanlopezxyz/n8n:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest|g" ${{ env.DEPLOYMENT_PATH }}/docker-compose-production.yml
          sudo -u n8n sed -i "s|docker.io/n8nio/n8n:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest|g" ${{ env.DEPLOYMENT_PATH }}/docker-compose-production.yml

      - name: Create environment file
        run: |
          cat > ${{ env.DEPLOYMENT_PATH }}/.env << EOF
          # PostgreSQL Configuration
          POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-n8n_secure_password_123}

          # n8n Configuration
          N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE:-true}
          N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER:-admin}
          N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD:-changeme}
          N8N_HOST=n8n.labjp.xyz
          N8N_PROTOCOL=https
          WEBHOOK_URL=https://n8n.labjp.xyz
          N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-your-encryption-key-here}
          TZ=America/Mexico_City
          EOF

          sudo -u n8n chmod 600 ${{ env.DEPLOYMENT_PATH }}/.env

      - name: Install podman-compose if not exists
        run: |
          if ! command -v podman-compose &> /dev/null; then
            echo "Installing podman-compose..."
            sudo pip3 install podman-compose
          else
            echo "podman-compose already installed"
          fi

      - name: Stop existing stack
        run: |
          cd ${{ env.DEPLOYMENT_PATH }}
          echo "📦 Stopping existing containers..."
          sudo -u n8n podman-compose -f docker-compose-production.yml down || true

      - name: Pull latest images
        run: |
          cd ${{ env.DEPLOYMENT_PATH }}
          echo "📥 Pulling latest images..."
          sudo -u n8n podman pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          sudo -u n8n podman pull docker.io/library/postgres:15-alpine
          sudo -u n8n podman pull docker.io/library/redis:7-alpine

      - name: Start production stack
        run: |
          cd ${{ env.DEPLOYMENT_PATH }}
          echo "🚀 Starting production stack..."
          sudo -u n8n podman-compose -f docker-compose-production.yml up -d

          # Wait for services to initialize
          echo "⏳ Waiting for services to start..."
          sleep 60

      - name: Health checks
        run: |
          echo "🔍 Checking service health..."

          cd ${{ env.DEPLOYMENT_PATH }}

          # Check container status
          echo "=== Container Status ==="
          sudo -u n8n podman-compose -f docker-compose-production.yml ps

          # Check PostgreSQL
          echo "Checking PostgreSQL..."
          for i in {1..10}; do
            if sudo -u n8n podman exec n8n-postgres pg_isready -U n8n 2>/dev/null; then
              echo "✅ PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL... ($i/10)"
            sleep 3
          done

          # Check Redis
          echo "Checking Redis..."
          for i in {1..10}; do
            if sudo -u n8n podman exec n8n-redis redis-cli ping 2>/dev/null; then
              echo "✅ Redis is ready"
              break
            fi
            echo "Waiting for Redis... ($i/10)"
            sleep 3
          done

          # Check n8n main instance
          echo "Checking n8n main instance..."
          max_attempts=20
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            if curl -f http://localhost:5678/healthz 2>/dev/null; then
              echo "✅ n8n is healthy and responding!"
              break
            else
              echo "Attempt $attempt/$max_attempts: n8n not ready yet..."
              sleep 10
              attempt=$((attempt + 1))
            fi
          done

          if [ $attempt -gt $max_attempts ]; then
            echo "❌ n8n health check failed after $max_attempts attempts"
            sudo -u n8n podman-compose -f docker-compose-production.yml logs n8n
            exit 1
          fi

      - name: Verify workers
        run: |
          cd ${{ env.DEPLOYMENT_PATH }}

          echo "🔧 Checking worker status..."

          # Check if workers are running
          if sudo -u n8n podman ps | grep -q n8n-worker; then
            echo "✅ Workers are running"

            # Show worker logs
            echo "Worker 1 last logs:"
            sudo -u n8n podman-compose -f docker-compose-production.yml logs --tail=10 n8n-worker-1 2>/dev/null || true

            echo ""
            echo "Worker 2 last logs:"
            sudo -u n8n podman-compose -f docker-compose-production.yml logs --tail=10 n8n-worker-2 2>/dev/null || true
          else
            echo "⚠️ No workers found - checking if queue mode is enabled..."
            sudo -u n8n podman-compose -f docker-compose-production.yml logs --tail=20 n8n
          fi

      - name: Show deployment summary
        if: always()
        run: |
          cd ${{ env.DEPLOYMENT_PATH }}

          echo "📊 === Deployment Summary ==="
          echo "Environment: ${{ inputs.environment || 'production' }}"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo ""
          echo "Stack components:"
          echo "  - PostgreSQL 15 (Database)"
          echo "  - Redis 7 (Queue & Cache)"
          echo "  - n8n Main (Web UI & API)"
          echo "  - n8n Worker 1 (Background jobs)"
          echo "  - n8n Worker 2 (Background jobs)"
          echo "  - Backup Service (Daily backups)"

          echo ""
          echo "=== Container Status ==="
          sudo -u n8n podman-compose -f docker-compose-production.yml ps

          echo ""
          echo "=== Recent n8n logs ==="
          sudo -u n8n podman-compose -f docker-compose-production.yml logs --tail=30 n8n 2>/dev/null || echo "Could not retrieve logs"

      - name: Deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ n8n production stack deployed successfully!"
            echo "🌐 Access URL: https://n8n.labjp.xyz"
            echo "📊 Components running:"
            sudo -u n8n podman ps --format "table {{.Names}}\t{{.Status}}" | grep -E "n8n|redis|postgres" || true
          else
            echo "❌ n8n production stack deployment failed"
            echo "Check the logs above for details"
          fi