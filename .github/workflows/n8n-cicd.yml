name: n8n CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'docker/**'
      - 'packages/**'
      - 'Dockerfile'
      - 'docker-compose*.yml'
      - 'deploy*.sh'
      - '.github/workflows/n8n-cicd.yml'

  workflow_dispatch:
    inputs:
      skip_build:
        description: 'Skip build stage (use existing image)'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/n8n

jobs:
  # ============================================
  # STAGE 1: BUILD & PUSH IMAGE
  # ============================================
  build-and-push:
    name: üèóÔ∏è Build and Push Image
    if: ${{ !inputs.skip_build }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image: ${{ steps.image.outputs.image }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üìã Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}

      - name: üèóÔ∏è Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/images/n8n/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            N8N_VERSION=latest

      - name: üì§ Output image info
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
          echo "‚úÖ Image built: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

      - name: üè∑Ô∏è Set version output
        id: version
        run: |
          echo "version=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

  # ============================================
  # STAGE 2: SECURITY SCAN
  # ============================================
  security-scan:
    name: üîí Security Scan
    needs: build-and-push
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: üîç Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-and-push.outputs.image || 'ghcr.io/labjp-xyz/n8n:latest' }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: üìä Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================
  # STAGE 3: DEPLOY TO PRODUCTION
  # ============================================
  deploy:
    name: üöÄ Deploy to Production
    needs: [build-and-push, security-scan]
    if: |
      always() &&
      (needs.build-and-push.result == 'success' || needs.build-and-push.result == 'skipped') &&
      (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped')
    runs-on: self-hosted
    environment:
      name: ${{ inputs.environment || 'production' }}
      url: http://${{ vars.PRODUCTION_HOST || 'server1.labjp.xyz' }}:5678

    steps:
      - name: üì• Checkout deployment scripts
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            docker-compose-postgres.yml
            deploy-n8n-postgres.sh

      - name: üõë Stop existing containers
        run: |
          sudo -u n8n bash -c '
            echo "üõë Stopping existing containers..."

            # Stop all n8n and postgres containers
            podman stop $(podman ps -q --filter "name=n8n") 2>/dev/null || true
            podman stop $(podman ps -q --filter "name=postgres") 2>/dev/null || true

            # Remove containers
            podman rm -f $(podman ps -aq --filter "name=n8n") 2>/dev/null || true
            podman rm -f $(podman ps -aq --filter "name=postgres") 2>/dev/null || true

            echo "‚úÖ Cleanup completed"
          '

      - name: üîß Setup deployment environment
        run: |
          sudo -u n8n bash -c '
            # Create deployment directory
            mkdir -p /opt/n8n
            cd /opt/n8n

            # Copy deployment files
            cp ${{ github.workspace }}/docker-compose-postgres.yml /opt/n8n/
            cp ${{ github.workspace }}/deploy-n8n-postgres.sh /opt/n8n/
            chmod +x /opt/n8n/deploy-n8n-postgres.sh

            # Setup environment variables
            if [ ! -f .env ]; then
              echo "üîê Generating secure credentials..."
              echo "POSTGRES_PASSWORD=$(openssl rand -hex 16)" > .env
              echo "N8N_BASIC_AUTH_PASSWORD=$(openssl rand -hex 12)" >> .env
              echo "N8N_ENCRYPTION_KEY=$(openssl rand -base64 48)" >> .env
              echo "N8N_HOST=$(hostname -f)" >> .env
              echo "TZ=America/Mexico_City" >> .env
            fi

            # Source environment
            source .env
            echo "‚úÖ Environment ready"
          '

      - name: üê≥ Deploy with Podman
        run: |
          sudo -u n8n bash -c '
            cd /opt/n8n

            # Load environment
            source .env

            # Create network
            podman network create n8n-network 2>/dev/null || true

            # Start PostgreSQL
            echo "üóÑÔ∏è Starting PostgreSQL..."
            podman run -d \
              --name n8n-postgres \
              --network n8n-network \
              -e POSTGRES_USER=n8n \
              -e POSTGRES_PASSWORD="${POSTGRES_PASSWORD}" \
              -e POSTGRES_DB=n8n \
              -v postgres_data:/var/lib/postgresql/data \
              --restart always \
              docker.io/library/postgres:15-alpine

            # Wait for PostgreSQL
            sleep 15

            # Pull latest n8n image
            echo "üì¶ Pulling n8n image..."
            IMAGE="${{ needs.build-and-push.outputs.image || env.REGISTRY }}/{{ env.IMAGE_NAME }}:latest"
            podman pull $IMAGE

            # Start n8n
            echo "üöÄ Starting n8n..."
            podman run -d \
              --name n8n \
              --network n8n-network \
              -e DB_TYPE=postgresdb \
              -e DB_POSTGRESDB_HOST=n8n-postgres \
              -e DB_POSTGRESDB_PORT=5432 \
              -e DB_POSTGRESDB_DATABASE=n8n \
              -e DB_POSTGRESDB_USER=n8n \
              -e DB_POSTGRESDB_PASSWORD="${POSTGRES_PASSWORD}" \
              -e N8N_BASIC_AUTH_ACTIVE=true \
              -e N8N_BASIC_AUTH_USER=admin \
              -e N8N_BASIC_AUTH_PASSWORD="${N8N_BASIC_AUTH_PASSWORD}" \
              -p 5678:5678 \
              -v n8n_data:/home/node/.n8n \
              --restart always \
              $IMAGE

            # Show status
            echo "üì¶ Running containers:"
            podman ps
          '

      - name: ‚úÖ Health check
        run: |
          sudo -u n8n bash -c '
            cd /opt/n8n

            echo "‚è≥ Waiting for services..."
            sleep 30

            # Check PostgreSQL
            echo "üîç Checking PostgreSQL..."
            podman exec n8n-postgres pg_isready -U n8n || exit 1

            # Check n8n
            echo "üîç Checking n8n..."
            if curl -f http://localhost:5678/healthz; then
              echo "‚úÖ n8n is healthy!"
            else
              echo "‚ùå n8n health check failed"
              podman logs n8n --tail=50
              exit 1
            fi

            echo ""
            echo "======================================"
            echo "‚úÖ Deployment successful!"
            echo "======================================"
            echo "üåê URL: http://$(hostname -f):5678"
            echo "üë§ User: admin"
            echo "üîë Password: Check /opt/n8n/.env"
            echo "======================================"
          '

      - name: üìä Send deployment notification
        if: always()
        run: |
          STATUS="${{ job.status }}"
          if [ "$STATUS" = "success" ]; then
            echo "‚úÖ Deployment completed successfully"
          else
            echo "‚ùå Deployment failed - check logs"
          fi

  # ============================================
  # STAGE 4: POST-DEPLOYMENT TESTS
  # ============================================
  smoke-test:
    name: üß™ Smoke Tests
    needs: deploy
    if: success()
    runs-on: self-hosted

    steps:
      - name: üîç Test n8n API
        run: |
          echo "Testing n8n API endpoints..."

          # Test health endpoint
          curl -f http://localhost:5678/healthz || exit 1

          # Test main page loads
          curl -f http://localhost:5678 || exit 1

          echo "‚úÖ All smoke tests passed"

      - name: üìà Check resource usage
        run: |
          sudo -u n8n bash -c '
            echo "üìä Resource Usage:"
            podman stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"
          '