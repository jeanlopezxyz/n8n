name: n8n CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'docker/**'
      - 'packages/**'
      - 'Dockerfile'
      - 'docker-compose*.yml'
      - 'deploy*.sh'
      - '.github/workflows/n8n-cicd.yml'

  pull_request:
    branches:
      - main
      - master
    types: [opened, synchronize, reopened]

  workflow_dispatch:
    inputs:
      skip_build:
        description: 'Skip build stage (use existing image)'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development
      image_tag:
        description: 'Image tag to deploy (if skip_build is true)'
        required: false
        default: 'latest'

env:
  # Default values for the workflow
  DEFAULT_ENVIRONMENT: 'production'
  DEFAULT_IMAGE_TAG: 'latest'
  DOCKERFILE_PATH: './docker/images/n8n/Dockerfile'
  DEPLOYMENT_PATH: '/opt/n8n'

jobs:
  # ============================================
  # DETERMINE DEPLOYMENT PARAMETERS
  # ============================================
  prepare:
    name: üéØ Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      environment: ${{ steps.check.outputs.environment }}
      skip_build: ${{ steps.check.outputs.skip_build }}

    steps:
      - name: Determine deployment parameters
        id: check
        run: |
          # For PR events, we only run tests, not deploy
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "skip_build=false" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "üß™ Pull Request detected - will run tests only"
          else
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "skip_build=${{ inputs.skip_build || false }}" >> $GITHUB_OUTPUT
            echo "environment=${{ inputs.environment || env.DEFAULT_ENVIRONMENT }}" >> $GITHUB_OUTPUT
            echo "üöÄ Will deploy to: ${{ inputs.environment || env.DEFAULT_ENVIRONMENT }}"
          fi

  # ============================================
  # CALL REUSABLE WORKFLOW FROM github-workflows
  # ============================================
  deploy-n8n:
    name: üöÄ n8n CI/CD Pipeline
    needs: prepare
    if: needs.prepare.outputs.should_deploy == 'true'
    uses: labjp-xyz/github-workflows/.github/workflows/deploy-n8n.yml@main
    with:
      skip-build: ${{ fromJson(needs.prepare.outputs.skip_build) }}
      environment: ${{ needs.prepare.outputs.environment }}
      image-tag: ${{ inputs.image_tag || 'latest' }}
      dockerfile-path: ${{ env.DOCKERFILE_PATH }}
      deployment-path: ${{ env.DEPLOYMENT_PATH }}
      runner-labels: '["self-hosted"]'
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}

  # ============================================
  # TEST ONLY (For Pull Requests)
  # ============================================
  test-build:
    name: üß™ Test Build
    needs: prepare
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          platforms: linux/amd64
          push: false
          tags: test-build:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================
  # NOTIFICATION (OPTIONAL)
  # ============================================
  notify-status:
    name: üì¢ Notify Deployment Status
    needs: deploy-n8n
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send notification
        run: |
          STATUS="${{ needs.deploy-n8n.result }}"
          ENV="${{ inputs.environment || 'production' }}"

          if [ "$STATUS" = "success" ]; then
            echo "‚úÖ n8n deployed successfully to $ENV"
          else
            echo "‚ùå n8n deployment failed for $ENV"
          fi

          # Add Slack/Discord/Email notification here if needed